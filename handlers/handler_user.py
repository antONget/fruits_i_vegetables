from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, LinkPreviewOptions
from aiogram.filters import CommandStart
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state


from config_data.config import Config, load_config
from database.requests import get_user_info, add_user, update_name_phone, get_list_product, \
    get_all_order_id, get_all_item_id
from keyboards.keyboard_user import keyboards_get_contact, keyboard_confirm_phone, keyboards_main_menu,\
    keyboard_confirm_order
from services.get_exel import list_price_to_exel
from datetime import datetime
import logging
from filter.user_filter import validate_russian_phone_number

router = Router()
config: Config = load_config()


class User(StatesGroup):
    name = State()
    phone = State()
    address = State()
    comment = State()
    amount = State()


user_dict = {}


@router.message(CommandStart())
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    """
    The "start" button is pressed or the "/start" command is entered
    :param message:
    :param state:
    :return:
    """
    logging.info("process_start_command_user")
    await state.set_state(default_state)
    user = await get_user_info(tg_id=message.chat.id)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ –ë–î
    if not user:
        await message.answer(text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(User.name)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º –∏ –µ—Å—Ç—å –≤ –ë–î
    else:
        await message.answer(text=f'{user.name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n'
                                  f'—Ç–µ–ª–µ—Ñ–æ–Ω: {user.phone}',
                             reply_markup=keyboard_confirm_phone())
    # await asyncio.sleep(1)
    # await state.update_data(start=True)


@router.message(F.text, StateFilter(User.name))
async def get_name_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param message:
    :param state:
    :return:
    """
    await state.update_data(name=message.text)
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É üëá\n'
                              '"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
                         reply_markup=keyboards_get_contact())
    await state.set_state(User.phone)


@router.callback_query(F.data == 'edit_phone')
async def press_button_edit_phone(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'press_button_edit_phone: {callback.message.chat.id}')
    await callback.message.answer(text='–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω',
                                  reply_markup=keyboards_get_contact())
    await state.set_state(User.phone)


@router.message(StateFilter(User.phone))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –∑–∞–Ω–æ—Å–∏–º –µ–≥–æ –≤ –ë–î
    :param message:
    :param state:
    :return:
    """
    logging.info(f'get_phone_user: {message.chat.id}')
    # –µ—Å–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—Å—è"
    if message.contact:
        phone = str(message.contact.phone_number)
    # –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
    else:
        phone = message.text
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –µ—Å–ª–∏ –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    # –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.update_data(phone=phone)
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict[message.chat.id] = await state.get_data()
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user = await get_user_info(tg_id=message.chat.id)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
    if not user:
        # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å username
        if message.from_user.username:
            await add_user(
                {"id": message.from_user.id,
                 "username": message.from_user.username,
                 "name": user_dict[message.chat.id]['name'],
                 "phone": user_dict[message.chat.id]['phone']})
        # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ –µ–≥–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            await update_name_phone(tg_id=message.chat.id,
                                    name=user_dict[message.chat.id]['name'],
                                    phone=user_dict[message.chat.id]['phone'])
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_order_id = await get_all_order_id(tg_id=message.chat.id)
    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        # —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã —Ä–æ–≤–Ω–∞ 0
        count_basket = 0
    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 'create'
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        all_item_id = await get_all_item_id(tg_id=message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await get_all_order_id(tg_id=message.chat.id)
        # –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        count_basket = 0
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for item in all_item_id:
            # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤—Ö–æ–¥—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if item.id_order == all_order_id[-1].id_order:
                # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ 0
                if item.count % 10:
                    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏–º –Ω–∞ 10
                    count = item.count / 10
                else:
                    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                    count = int(item.count // 10)
                # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω—É–ª–µ–º
                if (item.price * item.count) % 10:
                    count_basket += item.price * count
                else:
                    count_basket += int(item.price * count)
    await message.answer(text=f'–î—Ä—É–∑—å—è, –≤—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –æ–ø—Ç–æ–≤–æ–º –º–∞—Ä–∫–µ—Ç–µ.'
                              f' –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å'
                              f' –∏—Ö –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑!\n'
                              f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 5000 —Ä—É–±.\n'
                              f'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-22:00 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö\n\n'
                              f'–ï—Å–ª–∏ –º–µ–Ω—é —Å–≤–µ—Ä–Ω–µ—Ç—Å—è —Ç–æ –≤—ã –≤—Å–µ–≥–¥–∞ –µ–≥–æ —Å–º–æ–∂–µ—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ —Å —Ç–æ—á–∫–∞–º–∏'
                              f' –≤ –Ω–∏–∂–Ω–µ–π –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏',
                         reply_markup=keyboards_main_menu(basket=count_basket))
    await state.set_state(default_state)


@router.callback_query(F.data == 'continue_user')
async def press_button_continue_user(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """
    –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –ë–î)
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'press_button_continue_user: {callback.message.chat.id}')
    await callback.answer()
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except IndexError:
        pass
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        # —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã —Ä–æ–≤–Ω–∞ 0
        count_basket = 0
    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 'create'
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
        # –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        count_basket = 0
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for item in all_item_id:
            # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤—Ö–æ–¥—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if item.id_order == all_order_id[-1].id_order:
                # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ 0
                if item.count % 10:
                    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏–º –Ω–∞ 10
                    count = item.count / 10
                else:
                    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                    count = int(item.count // 10)
                # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω—É–ª–µ–º
                if (item.price * item.count) % 10:
                    count_basket += item.price * count
                else:
                    count_basket += int(item.price * count)
    await callback.message.answer(text='–î–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π '
                                       '–∑–∞–∫–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É.',
                                  reply_markup=keyboards_main_menu(basket=count_basket))
    await state.set_state(default_state)


@router.message(F.text == 'üìã –ù–∞—à–∏ —Ü–µ–Ω—ã')
async def press_button_home(message: Message):
    logging.info(f'press_button_home: {message.chat.id}')
    current_date = datetime.now()
    current_date_string = current_date.strftime('%d/%m/%Y')
    text = f'<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω–∞ –Ω–∞ {current_date_string}:</b>\n\n'
    for category in ['–§—Ä—É–∫—Ç—ã', '–û–≤–æ—â–∏', '–Ø–≥–æ–¥—ã', '–ó–µ–ª–µ–Ω—å']:
        list_price = await get_list_product(category=category)
        text += f'<i><u>{category}</u></i>:\n'
        i = 0
        for item in list_price:
            i += 1
            text += f'{i}. {item.title} - {item.price} —Ä—É–±/–∫–≥.\n'
    await message.answer(text=text,
                         parse_mode='html')
    await list_price_to_exel()
    file_path = "list_price.xlsx"
    await message.answer_document(FSInputFile(file_path))


@router.message(F.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ')
async def press_home(message: Message, state: FSMContext):
    logging.info(f'press_home: {message.chat.id}')
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_order_id = await get_all_order_id(tg_id=message.chat.id)
    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        # —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã —Ä–æ–≤–Ω–∞ 0
        count_basket = 0
    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 'create'
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        all_item_id = await get_all_item_id(tg_id=message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await get_all_order_id(tg_id=message.chat.id)
        # –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        count_basket = 0
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for item in all_item_id:
            # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤—Ö–æ–¥—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if item.id_order == all_order_id[-1].id_order:
                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
                count_basket += item.count * item.price
    await message.answer(text='–î–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π '
                              '–∑–∞–∫–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É.',
                         reply_markup=keyboards_main_menu(basket=count_basket))
    await state.set_state(default_state)


@router.message(F.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'))
async def press_button_basket(message: Message):
    logging.info(f'press_button_berry: {message.chat.id}')
    all_order_id = await get_all_order_id(tg_id=message.chat.id)
    all_item_id = await get_all_item_id(tg_id=message.chat.id)
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        await message.answer('–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!')
    else:
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == all_order_id[-1].id_order:
                i += 1
                if item.count % 10:
                    count = item.count / 10
                else:
                    count = int(item.count // 10)
                if (item.price * item.count) % 10:
                    amount = item.price * count
                else:
                    amount = int(item.price * count)
                text += f'{i}. {item.item} {count} x {item.price} = {amount} —Ä—É–±.\n'
                total += amount
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
        await message.answer(text=text,
                             reply_markup=keyboard_confirm_order(id_order=all_order_id[-1].id_order))


@router.message(F.text.startswith('üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'))
async def press_button_contact(message: Message):
    logging.info(f'press_button_contact: {message.chat.id}')
    media = []
    image_1 = 'AgACAgIAAxkBAAOpZnmbimV6FaiEk3AICkRs9Mzy_EcAAgLhMRtI39FLSsPzkuwcoccBAAMCAAN4AAM1BA'
    image_2 = 'AgACAgIAAxkBAAOqZnmcQJGncc-rD3T37wsaBvGPs-4AAgjhMRtI39FLFtmbrG3_dy4BAAMCAAN5AAM1BA'
    media.append(InputMediaPhoto(media=image_1,
                                 caption=f'<b>–ù–∞—à –∞–¥—Ä–µ—Å: –ø—Ä–æ—Å–ø–µ–∫—Ç –ù–µ–ø–æ–∫–æ—Ä—ë–Ω–Ω—ã—Ö, 63–∫13—Å2 - –æ—Ç–¥–µ–ª –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤</b>\n'
                                         f'<a href="https://yandex.ru/maps/-/CDvd5Jy7">–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n\n'
                                         f'–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É.\n'
                                         f'<u>–£—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏:</u> –¥–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ö–ê–î –±–µ—Å–ø–ª–∞—Ç–Ω–æ. '
                                         f'–ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑ –¥–æ 13.00, —Ç–æ –¥–æ—Å—Ç–∞–≤–∏–º –≤ —ç—Ç–æ—Ç –∂–µ –¥–µ–Ω—å!\n'
                                         f'–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: <a href="https://t.me/{config.tg_bot.support}">@'
                                         f'{config.tg_bot.support}</a>\n',
                                 parse_mode='html',
                                 link_preview_options=LinkPreviewOptions(is_disabled=True)))
    media.append(InputMediaPhoto(media=image_2))
    await message.answer_media_group(media=media)


@router.message(F.text.startswith('üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'))
async def press_button_cabinet(message: Message):
    logging.info(f'press_button_cabinet: {message.chat.id}')
    await message.answer(text='–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n'
                              '–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã –∏ —É–∑–Ω–∞—Ç—å –æ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–∫–∏–¥–æ–∫!')
