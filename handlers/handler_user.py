from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, InputMediaPhoto, LinkPreviewOptions
from aiogram.filters import CommandStart
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state


from config_data.config import Config, load_config
from database.requests import get_user_info, add_user, update_name_phone, get_list_product, \
    get_product, get_title, get_info_product, add_order, get_all_order_id, add_item, get_all_item_id, update_status,\
    OrderStatus, update_address, get_info_item, delete_item
from keyboards.keyboard_user import keyboards_get_contact, keyboard_confirm_phone, keyboards_main_menu,\
    keyboards_list_product, keyboards_get_count, keyboard_create_item, keyboard_confirm_order, keyboard_delivery, \
    keyboard_confirm_address, keyboard_finish_order_p, keyboard_finish_order_d, keyboards_list_item_change, \
    keyboard_change_item
from services.get_exel import list_price_to_exel
from datetime import datetime


import logging
import re

router = Router()
config: Config = load_config()


class User(StatesGroup):
    name = State()
    phone = State()
    address = State()
    comment = State()


user_dict = {}


def validate_russian_phone_number(phone_number):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    pattern = re.compile(r'^(\+7|8|7)?(\d{10})$')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω—É
    match = pattern.match(phone_number)

    return bool(match)


@router.message(CommandStart())
async def process_start_command_user(message: Message, state: FSMContext) -> None:
    logging.info("process_start_command_user")
    await state.set_state(default_state)
    user = await get_user_info(tg_id=message.chat.id)
    if not user:
        await message.answer(text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(User.name)
    else:
        await message.answer(text=f'{user.name}, —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!\n'
                                  f'—Ç–µ–ª–µ—Ñ–æ–Ω: {user.phone}',
                             reply_markup=keyboard_confirm_phone())


@router.message(F.text, StateFilter(User.name))
async def get_name_user(message: Message, state: FSMContext) -> None:
    await state.update_data(name=message.text)
    await message.answer(text='–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –≤–Ω–∏–∑—É üëá\n'
                              '"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è"',
                         reply_markup=keyboards_get_contact())
    await state.set_state(User.phone)


@router.callback_query(F.data == 'edit_phone')
async def press_button_edit_phone(callback: CallbackQuery, state: FSMContext) -> None:
    logging.info(f'press_button_edit_phone: {callback.message.chat.id}')
    await callback.message.answer(text='–£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω',
                                  reply_markup=keyboards_get_contact())
    await state.set_state(User.phone)


@router.callback_query(F.data == 'continue_user')
async def press_button_continue_user(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    logging.info(f'press_button_continue_user: {callback.message.chat.id}')
    await callback.answer()
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except:
        pass
    await callback.message.answer(text='–î–ª—è –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π '
                                       '–∑–∞–∫–∞–∑, –æ–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É.',
                                  reply_markup=keyboards_main_menu())
    await state.set_state(default_state)


@router.message(StateFilter(User.phone))
async def get_phone_user(message: Message, state: FSMContext) -> None:
    logging.info(f'get_phone_user: {message.chat.id}')
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return
    await state.update_data(phone=phone)
    user_dict[message.chat.id] = await state.get_data()
    user = await get_user_info(tg_id=message.chat.id)
    if not user:
        if message.from_user.username:
            await add_user(
                {"id": message.from_user.id,
                 "username": message.from_user.username,
                 "name": user_dict[message.chat.id]['name'],
                 "phone": user_dict[message.chat.id]['phone']})
        else:
            await update_name_phone(tg_id=message.chat.id,
                                    name=user_dict[message.chat.id]['name'],
                                    phone=user_dict[message.chat.id]['phone'])
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_order_id = await get_all_order_id(tg_id=message.chat.id)
    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if not all_order_id or all_order_id[-1].status == 'complete':
        count_basket = 0
    elif all_order_id[-1].status == 'complete':
        count_basket = 0
    else:
        all_item_id = await get_all_item_id(tg_id=message.chat.id)
        all_order_id = await get_all_order_id(tg_id=message.chat.id)
        count_basket = 0
        for item in all_item_id:
            if item.id_order == all_order_id[-1].id_order:
                count_basket += item.count * item.price
    await message.answer(text=f'–î—Ä—É–∑—å—è, –≤—Å–µ–º –¥–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, —Ä–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ.'
                              f' –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –∏ –≤–∫—É—Å–Ω—ã–µ —Ñ—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏ –∏ –∑–∞–∫–∞–∑–∞—Ç—å'
                              f' –∏—Ö –¥–æ—Å—Ç–∞–≤–∫—É –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑!\n'
                              f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 5000 —Ä—É–±.\n'
                              f'–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: 10:00-23:00 –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö',
                         reply_markup=keyboards_main_menu(basket=count_basket))
    await state.set_state(default_state)


@router.message(F.text == 'üìã –ù–∞—à–∏ —Ü–µ–Ω—ã')
async def press_button_home(message: Message):
    logging.info(f'press_button_home: {message.chat.id}')
    current_date = datetime.now()
    current_date_string = current_date.strftime('%d/%m/%Y')
    text = f'<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω–∞ –Ω–∞ {current_date_string}:</b>\n\n'
    for category in ['–§—Ä—É–∫—Ç—ã', '–û–≤–æ—â–∏', '–Ø–≥–æ–¥—ã', '–ó–µ–ª–µ–Ω—å']:
        list_price = await get_list_product(category=category)
        text += f'<i><u>{category}</u></i>:\n'
        i = 0
        for item in list_price:
            i += 1
            text += f'{i}. {item.title} - {item.price} —Ä—É–±/–∫–≥.\n'
    await message.answer(text=text,
                         parse_mode='html')
    await list_price_to_exel()
    file_path = "list_price.xlsx"
    await message.answer_document(FSInputFile(file_path))


@router.message(F.text == '–§—Ä—É–∫—Ç—ã  üçäüçéüçê')
async def press_button_fruits(message: Message):
    logging.info(f'press_button_fruits: {message.chat.id}')
    price_list_model = await get_list_product(category='–§—Ä—É–∫—Ç—ã')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=keyboards_list_product(list_product=list_product))


@router.message(F.text == '–û–≤–æ—â–∏ üçÜü•ïü•î')
async def press_button_vegetation(message: Message):
    logging.info(f'press_button_vegetation: {message.chat.id}')
    price_list_model = await get_list_product(category='–û–≤–æ—â–∏')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=keyboards_list_product(list_product=list_product))


@router.message(F.text == '–ó–µ–ª–µ–Ω—å üåø')
async def press_button_green(message: Message):
    logging.info(f'press_button_green: {message.chat.id}')
    price_list_model = await get_list_product(category='–ó–µ–ª–µ–Ω—å')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=keyboards_list_product(list_product=list_product))


@router.message(F.text == '–Ø–≥–æ–¥—ã üçìüçíü´ê')
async def press_button_berry(message: Message):
    logging.info(f'press_button_berry: {message.chat.id}')
    price_list_model = await get_list_product(category='–Ø–≥–æ–¥—ã')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=keyboards_list_product(list_product=list_product))


@router.message(F.text.startswith('üõí –ö–æ—Ä–∑–∏–Ω–∞'))
async def press_button_basket(message: Message):
    logging.info(f'press_button_berry: {message.chat.id}')
    all_order_id = await get_all_order_id(tg_id=message.chat.id)
    all_item_id = await get_all_item_id(tg_id=message.chat.id)
    if not all_order_id or all_order_id[-1].status == 'complete':
        await message.answer('–í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤!')
    else:
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == all_order_id[-1].id_order:
                i += 1
                text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
                total += (item.count/10) * item.price
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
        await message.answer(text=text,
                             reply_markup=keyboard_confirm_order(id_order=all_order_id[-1].id_order))


@router.message(F.text.startswith('üìç –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'))
async def press_button_contact(message: Message):
    logging.info(f'press_button_contact: {message.chat.id}')
    media = []
    image_1 = 'AgACAgIAAxkBAAOpZnmbimV6FaiEk3AICkRs9Mzy_EcAAgLhMRtI39FLSsPzkuwcoccBAAMCAAN4AAM1BA'
    image_2 = 'AgACAgIAAxkBAAOqZnmcQJGncc-rD3T37wsaBvGPs-4AAgjhMRtI39FLFtmbrG3_dy4BAAMCAAN5AAM1BA'
    media.append(InputMediaPhoto(media=image_1,
                                 caption='–ù–∞—à –∞–¥—Ä–µ—Å: –ø—Ä–æ—Å–ø–µ–∫—Ç –ù–µ–ø–æ–∫–æ—Ä—ë–Ω–Ω—ã—Ö, 63–∫13—Å2 - –æ—Ç–¥–µ–ª –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤\n'
                                         '<a href="https://yandex.ru/maps/-/CDvd5Jy7">–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n'
                                         '–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: <a href="https://t.me/el_rstmv">@el_rstmv</a>\n',
                                 parse_mode='html',
                                 link_preview_options=LinkPreviewOptions(is_disabled=True)))
    media.append(InputMediaPhoto(media=image_2))
    await message.answer_media_group(media=media)


@router.callback_query(F.data.startswith('product'))
async def get_title_product(callback: CallbackQuery, state: FSMContext):
    logging.info(f'get_title_product: {callback.message.chat.id}')
    await callback.answer()
    product = callback.data.split('_')[1]
    # print(product)
    price_list_model = await get_product(product=product)
    # print(len(price_list_model))
    if len(price_list_model) == 1:
        # print(price_list_model)
        price_list_title = await get_title(title=price_list_model[0].title)
        # print(price_list_title)
        await state.update_data(count_item=0)
        await state.update_data(comma=0)
        if '—à—Ç' in price_list_title.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {price_list_title.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_list_title.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=keyboards_get_count(id_product=price_list_title.id))
    elif len(price_list_model) == 0:
        # print(price_list_model)
        price_list_title = await get_title(title=product)
        # print(price_list_title)
        await state.update_data(count_item=0)
        await state.update_data(comma=0)
        if '—à—Ç' in price_list_title.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {price_list_title.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_list_title.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=keyboards_get_count(id_product=price_list_title.id))
    else:
        title = []
        for item in price_list_model:
            title.append(item.title)
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                                         reply_markup=keyboards_list_product(list_product=title))


@router.callback_query(F.data.startswith('digit_'))
async def process_count_product(callback: CallbackQuery, state: FSMContext):
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'get_count_product: {callback.message.chat.id}')
    await callback.answer()
    input_user = callback.data.split('_')
    # –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞
    digit = input_user[1]
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ —Ü–∏—Ñ—Ä–∞
    if digit.isdigit():
        user_dict[callback.message.chat.id] = await state.get_data()
        # –µ—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è –Ω–µ –Ω–∞–∂–∞—Ç–∞
        if user_dict[callback.message.chat.id]['comma'] == 0:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            count_item = int(str(user_dict[callback.message.chat.id]['count_item']) + str(digit))
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await state.update_data(count_item=count_item)
            # –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞
            id_product = input_user[2]
            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
            info_product = await get_info_product(id_product=int(id_product))
            if '—à—Ç' in info_product.title:
                e = '—à—Ç'
            else:
                e = '–∫–≥'
            try:
                await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                                      f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item} {e}.',
                                                 reply_markup=keyboards_get_count(id_product=info_product.id,
                                                                                  count_item=count_item * 10))
            except:
                pass
        # –µ—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è –Ω–∞–∂–∞—Ç–∞ –∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        else:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –¥–µ—Å—è—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
            # —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ü–µ–ª—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            count_item = int(user_dict[callback.message.chat.id]['count_item']) * 10 + int(digit)
            # –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –æ–¥–Ω–æ —á–∏—Å–ª–æ
            await state.update_data(count_item=0)
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∑–∞–ø—è—Ç–æ–π
            await state.update_data(comma=0)
            # –ø–æ–ª—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
            id_product = input_user[2]
            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            info_product = await get_info_product(id_product=int(id_product))
            if '—à—Ç' in info_product.title:
                e = '—à—Ç'
            else:
                e = '–∫–≥'
            try:
                await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                                      f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item/10} {e}.',
                                                 reply_markup=keyboards_get_count(id_product=info_product.id,
                                                                                  count_item=count_item))
            except:
                pass
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∑–∞–ø—è—Ç–∞—è
    elif digit == '#':
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
        user_dict[callback.message.chat.id] = await state.get_data()
        # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–≤–æ–¥–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        await state.update_data(comma=1)
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        count_item = user_dict[callback.message.chat.id]['count_item']
        # –ø–æ–ª—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
        id_product = input_user[2]
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        info_product = await get_info_product(id_product=int(id_product))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å –∏ —É–º–Ω–æ–∂–∏–≤ –Ω–∞ 10 —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        if '—à—Ç' in info_product.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item},00 {e}.',
                                         reply_markup=keyboards_get_count(id_product=info_product.id,
                                                                          count_item=count_item*10))
    else:
        await state.update_data(comma=0)
        await state.update_data(count_item=0)
        id_product = input_user[2]
        info_product = await get_info_product(id_product=int(id_product))
        if '—à—Ç' in info_product.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=keyboards_get_count(id_product=info_product.id,
                                                                          count_item=0))


@router.callback_query(F.data.startswith('count'))
async def get_count_product(callback: CallbackQuery):
    """
    –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :return:
    """
    logging.info(f'get_count_product: {callback.message.chat.id}')
    await callback.answer()
    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    count = int(callback.data.split('_')[1])
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    info_product = await get_info_product(id_product=int(callback.data.split('_')[2]))
    if '—à—Ç' in info_product.title:
        e = '—à—Ç'
    else:
        e = '–∫–≥'
    await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {info_product.title}\n\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count/10} {e}.\n'
                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} x {count/10} = '
                                          f'{info_product.price * count/10} —Ä—É–±.',
                                     reply_markup=keyboard_create_item(id_product=int(callback.data.split('_')[2]),
                                                                       count_item=count))


@router.callback_query(F.data.startswith('add_item/'))
async def add_item_order(callback: CallbackQuery, bot: Bot):
    """
    –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'add_item_order: {callback.message.chat.id} - {callback.data}')
    await callback.answer()
    if callback.data.split('/')[1] != 'cancel':
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        count_item = int(callback.data.split('/')[2])
        # id —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ price
        id_product = int(callback.data.split('/')[1])
        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        info_product = await get_info_product(id_product=id_product)

        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        if not all_order_id or all_order_id[-1].status == 'complete':
            create_order = {}
            # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            current_date = datetime.now()
            current_date_string = current_date.strftime('%m/%d/%y_%H:%M:%S')
            # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            id_order = f'{callback.message.chat.id}_{current_date_string}'
            create_order['id_order'] = id_order
            create_order['telegram_id'] = callback.message.chat.id
            await add_order(data=create_order)
            create_item = {}
            create_item['id_order'] = id_order
            create_item['telegram_id'] = callback.message.chat.id
            create_item['item'] = info_product.title
            create_item['count'] = count_item
            create_item['price'] = info_product.price
            await add_item(data=create_item)
        else:
            create_item = {}
            create_item['id_order'] = all_order_id[-1].id_order
            create_item['telegram_id'] = callback.message.chat.id
            create_item['item'] = info_product.title
            create_item['count'] = count_item
            create_item['price'] = info_product.price
            await add_item(data=create_item)
        all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
        all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == all_order_id[-1].id_order:
                i += 1
                text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
                total += (item.count/10) * item.price
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
        await callback.message.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑',
                                      reply_markup=keyboards_main_menu(basket=total))
        await callback.message.answer(text=text,
                                      reply_markup=keyboard_confirm_order(id_order=all_order_id[-1].id_order))
        try:
            await bot.delete_message(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id)
        except:
            pass
    else:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id)
        except:
            pass
        await callback.message.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!')


@router.callback_query(F.data.startswith('place_an_order/'))
async def place_an_order(callback: CallbackQuery, bot: Bot):
    """
    –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'place_an_order: {callback.message.chat.id}')
    await callback.answer()
    count_item = int(callback.data.split('/')[2])
    id_product = int(callback.data.split('/')[1])
    info_product = await get_info_product(id_product=id_product)
    all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
    if not all_order_id or all_order_id[-1].status == 'complete':
        create_order = {}
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        current_date = datetime.now()
        current_date_string = current_date.strftime('%m/%d/%y_%H:%M:%S')
        # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        id_order = f'{callback.message.chat.id}_{current_date_string}'
        create_order['id_order'] = id_order
        create_order['telegram_id'] = callback.message.chat.id
        await add_order(data=create_order)
        create_item = {}
        create_item['id_order'] = id_order
        create_item['telegram_id'] = callback.message.chat.id
        create_item['item'] = info_product.title
        create_item['count'] = count_item
        create_item['price'] = info_product.price
        await add_item(data=create_item)
    else:
        create_item = {}
        create_item['id_order'] = all_order_id[-1].id_order
        create_item['telegram_id'] = callback.message.chat.id
        create_item['item'] = info_product.title
        create_item['count'] = count_item
        create_item['price'] = info_product.price
        await add_item(data=create_item)
    all_order_id = await get_all_order_id(tg_id=callback.message.chat.id)
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
    i = 0
    total = 0
    for item in all_item_id:
        if item.id_order == all_order_id[-1].id_order:
            i += 1
            text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
            total += (item.count/10) * item.price
    text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
    await callback.message.answer(text=text,
                                  reply_markup=keyboards_main_menu(basket=total))
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except:
        pass
    await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑',
                                  reply_markup=keyboard_confirm_order(id_order=all_order_id[-1].id_order))


@router.callback_query(F.data.startswith('change#'))
async def order_confirm(callback: CallbackQuery, state: FSMContext):
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    id_order = callback.data.split('#')[1]
    await state.update_data(id_order=id_order)
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    list_item = []
    for item in all_item_id:
        if item.id_order == id_order:
            list_item.append(item)

    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                                     reply_markup=keyboards_list_item_change(list_item=list_item))


@router.callback_query(F.data.startswith('itemchange_'))
async def item_change(callback: CallbackQuery, state: FSMContext):
    logging.info(f'item_change: {callback.message.chat.id}')
    await callback.answer()
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    id_item = int(callback.data.split('_')[1])
    await callback.message.edit_text(text='–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –∑–∞–∫–∞–∑–∞?',
                                     reply_markup=keyboard_change_item(id_item=id_item, id_order=id_order))


@router.callback_query(F.data.startswith('itemdel#'))
async def process_item_change(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_item_change: {callback.message.chat.id}')
    await callback.answer()
    id_item = int(callback.data.split('#')[1])
    await delete_item(id_item=id_item)
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    # all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    # list_item = []
    # for item in all_item_id:
    #     if item.id_order == id_order:
    #         list_item.append(item)
    #
    # await callback.message.edit_text(text='–í–≤–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–Ω–∏—è',
    #                                  reply_markup=keyboards_list_item_change(list_item=list_item))
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
    i = 0
    total = 0
    for item in all_item_id:
        if item.id_order == id_order:
            i += 1
            text += f'{i}. {item.item} {item.count / 10} x {item.price} = {(item.count / 10) * item.price} —Ä—É–±.\n'
            total += (item.count / 10) * item.price
    text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
    await callback.message.answer(text=text,
                                  reply_markup=keyboards_main_menu(basket=total))
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except:
        pass
    await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑',
                                  reply_markup=keyboard_confirm_order(id_order=id_order))


@router.callback_query(F.data.startswith('itemchange#'))
async def process_item_change(callback: CallbackQuery, state: FSMContext):
    logging.info(f'process_item_change: {callback.message.chat.id}')
    await callback.answer()
    id_item = int(callback.data.split('#')[1])
    await state.update_data(comma=0)

    info_item = await get_info_item(id_item=id_item)
    await state.update_data(count_item=0)
    info_price = await get_title(title=info_item.item)
    if '—à—Ç' in info_price.title:
        e = '—à—Ç'
    else:
        e = '–∫–≥'
    await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {info_item.item}\n\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {info_item.count/10} {e}.\n'
                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_item.price} x {info_item.count/10} = '
                                          f'{info_item.price * info_item.count/10} —Ä—É–±.',
                                     reply_markup=keyboards_get_count(id_product=info_price.id,
                                                                      count_item=info_item.count))


@router.callback_query(F.data.startswith('confirm#'))
async def order_confirm(callback: CallbackQuery, state: FSMContext):
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    id_order = callback.data.split('#')[1]
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    total = 0
    for item in all_item_id:
        if item.id_order == id_order:
            total += (item.count / 10) * item.price
    await state.update_data(id_order=id_order)
    if total < 5000:
        await callback.message.answer(text='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 5000 —Ä—É–±.')
        await press_button_basket(message=callback.message)
    else:
        await callback.message.edit_text(text='–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑?',
                                         reply_markup=keyboard_delivery())


@router.callback_query(F.data == 'pickup')
async def order_delivery(callback: CallbackQuery, state: FSMContext):
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    await update_status(id_order=id_order, status=OrderStatus.pickup)
    user_info = await get_user_info(tg_id=callback.message.chat.id)
    phone = user_info.phone
    name = user_info.name
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    text = f'{name}, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∑–∞–∫–∞–∑:\n\n'
    i = 0
    total = 0
    for item in all_item_id:
        if item.id_order == id_order:
            i += 1
            text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
            total += (item.count/10) * item.price
    text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.\n\n' \
            f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n'
    await callback.message.edit_text(text=text,
                                     reply_markup=keyboard_finish_order_p())


@router.callback_query(F.data.startswith('finishp_'))
async def process_finish_p(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_finish: {callback.message.chat.id}')
    await callback.answer()
    answer = callback.data.split('_')[1]
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    if answer == 'ok':
        await callback.message.edit_reply_markup(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–∫–∞–∑, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'
                                                      ' –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑!',
                                                 reply_markup=None)
        media = []
        image_1 = 'AgACAgIAAxkBAAOpZnmbimV6FaiEk3AICkRs9Mzy_EcAAgLhMRtI39FLSsPzkuwcoccBAAMCAAN4AAM1BA'
        image_2 = 'AgACAgIAAxkBAAOqZnmcQJGncc-rD3T37wsaBvGPs-4AAgjhMRtI39FLFtmbrG3_dy4BAAMCAAN5AAM1BA'
        media.append(InputMediaPhoto(media=image_1,
                                     caption='–ù–∞—à –∞–¥—Ä–µ—Å: –ø—Ä–æ—Å–ø–µ–∫—Ç –ù–µ–ø–æ–∫–æ—Ä—ë–Ω–Ω—ã—Ö, 63–∫13—Å2 - –æ—Ç–¥–µ–ª –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤\n'
                                             '<a href="https://yandex.ru/maps/-/CDvd5Jy7">–ø–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</a>\n'
                                             '–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–≤—è–∑–∏: <a href="https://t.me/el_rstmv">@el_rstmv</a>\n',
                                     reply_markup=keyboards_main_menu(basket=0),
                                     parse_mode='html',
                                     link_preview_options=LinkPreviewOptions(is_disabled=True)))
        media.append(InputMediaPhoto(media=image_2))
        await callback.message.answer_media_group(media=media)
        # await callback.message.answer(text='–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –ø–æ –∞–¥—Ä–µ—Å—É: –ø—Ä–æ—Å–ø–µ–∫—Ç –ù–µ–ø–æ–∫–æ—Ä—ë–Ω–Ω—ã—Ö, 63–∫13—Å2',
        #                               reply_markup=keyboards_main_menu(basket=0))
        await update_status(id_order=id_order, status=OrderStatus.complete)
        user_info = await get_user_info(tg_id=callback.message.chat.id)
        phone = user_info.phone
        name = user_info.name
        text = f'–ó–∞–∫–∞–∑ ‚Ññ{id_order}:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == id_order:
                i += 1
                text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
                total += (item.count/10) * item.price
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.\n\n' \
                f'–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {name}\n' \
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n'

        for admin_id in config.tg_bot.admin_ids.split(','):
            try:
                await bot.send_message(chat_id=int(admin_id),
                                       text=text)
            except:
                pass
    else:
        await press_button_basket(message=callback.message)


@router.callback_query(F.data == 'delivery')
async def order_delivery(callback: CallbackQuery, state: FSMContext):
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    await update_status(id_order=id_order, status=OrderStatus.delivery)
    await callback.message.edit_text(text='–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏',
                                     reply_markup=None)
    await state.set_state(User.address)


@router.message(F.text, StateFilter(User.address))
async def get_address(message: Message, state: FSMContext):
    logging.info('get_address')
    await state.set_state(default_state)
    address = message.text
    await state.update_data(address=address)
    await message.answer(text=f'–ê–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {address}.\n'
                              f'–í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_address())


@router.callback_query(F.data.startswith('address_'))
async def process_address(callback: CallbackQuery, state: FSMContext):
    logging.info(f'process_address: {callback.message.chat.id}')
    await callback.answer()
    answer = callback.data.split('_')[1]
    if answer == 'ok':
        user_dict[callback.message.chat.id] = await state.get_data()
        id_order = user_dict[callback.message.chat.id]['id_order']
        address = user_dict[callback.message.chat.id]['address']
        await update_address(id_order=id_order, address=address)
        user_info = await get_user_info(tg_id=callback.message.chat.id)
        phone = user_info.phone
        name = user_info.name
        all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
        text = f'{name}, –¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == id_order:
                i += 1
                text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
                total += (item.count/10) * item.price
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.\n\n' \
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n' \
                f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}'
        await callback.message.edit_text(text=text,
                                         reply_markup=keyboard_finish_order_d())
    else:
        await order_delivery(callback=callback, state=state)


@router.callback_query(F.data.startswith('finishd_'))
async def process_finish(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'process_finish: {callback.message.chat.id}')
    await callback.answer()
    answer = callback.data.split('_')[1]
    all_item_id = await get_all_item_id(tg_id=callback.message.chat.id)
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    if answer == 'ok':
        await callback.message.answer(text='–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –∑–∞–∫–∞–∑, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è'
                                           ' –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏!',
                                      reply_markup=keyboards_main_menu(basket=0))
        await update_status(id_order=id_order, status=OrderStatus.complete)
        address = user_dict[callback.message.chat.id]['address']
        user_info = await get_user_info(tg_id=callback.message.chat.id)
        phone = user_info.phone
        name = user_info.name
        text = f'–ó–∞–∫–∞–∑ ‚Ññ{id_order}:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == id_order:
                i += 1
                text += f'{i}. {item.item} {item.count/10} x {item.price} = {(item.count/10) * item.price} —Ä—É–±.\n'
                total += (item.count/10) * item.price
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.\n\n' \
                f'–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: {name}\n' \
                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}\n' \
                f'–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}'

        for admin_id in config.tg_bot.admin_ids.split(','):
            try:
                await bot.send_message(chat_id=int(admin_id),
                                       text=text)
            except:
                pass
    else:
        await callback.message.edit_text(text='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω–æ',
                                         reply_markup=None)
