from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
import database.requests as rq
import keyboards.keyboard_user as kb
from datetime import datetime
import logging
import asyncio
router_shop = Router()
user_dict = {}


@router_shop.message(F.text == 'üõç –ú–∞–≥–∞–∑–∏–Ω')
async def press_shop(message: Message):
    logging.info(f'press_shop: {message.chat.id}')
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_order_id = await rq.get_all_order_id(tg_id=message.chat.id)
    # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        # —Å—É–º–º–∞ –∫–æ—Ä–∑–∏–Ω—ã —Ä–æ–≤–Ω–∞ 0
        count_basket = 0
    # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ 'create'
    else:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        all_item_id = await rq.get_all_item_id(tg_id=message.chat.id)
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await rq.get_all_order_id(tg_id=message.chat.id)
        # –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
        count_basket = 0
        # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for item in all_item_id:
            # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –≤—Ö–æ–¥—è—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if item.id_order == all_order_id[-1].id_order:
                # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ 0
                if item.count % 10:
                    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–∏–º –Ω–∞ 10
                    count = item.count / 10
                else:
                    # –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                    count = int(item.count // 10)
                # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –Ω—É–ª–µ–º
                if (item.price * item.count) % 10:
                    count_basket += item.price * count
                else:
                    count_basket += int(item.price * count)
    list_price = await rq.get_list_price()
    list_category = list(set([price.category for price in list_price]))
    await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑',
                         reply_markup=kb.keyboards_main_category(list_category=list_category, basket=count_basket))


@router_shop.message(F.text == '–§—Ä—É–∫—Ç—ã üçäüçéüçê')
async def press_button_fruits(message: Message):
    """
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ñ—Ä—É–∫—Ç—ã –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message:
    :return:
    """
    logging.info(f'press_button_fruits: {message.chat.id}')
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    price_list_model = await rq.get_list_product(category='–§—Ä—É–∫—Ç—ã üçäüçéüçê')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=kb.keyboards_list_product(list_product=list_product))


@router_shop.message(F.text == '–û–≤–æ—â–∏ üçÜü•ïü•î')
async def press_button_vegetation(message: Message):
    """
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –û–≤–æ—â–∏ –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message:
    :return:
    """
    logging.info(f'press_button_vegetation: {message.chat.id}')
    price_list_model = await rq.get_list_product(category='–û–≤–æ—â–∏ üçÜü•ïü•î')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=kb.keyboards_list_product(list_product=list_product))


@router_shop.message(F.text == '–ó–µ–ª–µ–Ω—å üåøü•¶ü•¨')
async def press_button_green(message: Message):
    """
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ó–µ–ª–µ–Ω—å –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message:
    :return:
    """
    logging.info(f'press_button_green: {message.chat.id}')
    price_list_model = await rq.get_list_product(category='–ó–µ–ª–µ–Ω—å üåøü•¶ü•¨')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=kb.keyboards_list_product(list_product=list_product))


@router_shop.message(F.text == '–Ø–≥–æ–¥—ã üçìüçíü´ê')
async def press_button_berry(message: Message):
    """
    –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ø–≥–æ–¥—ã –∏ –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    :param message:
    :return:
    """
    logging.info(f'press_button_berry: {message.chat.id}')
    price_list_model = await rq.get_list_product(category='–Ø–≥–æ–¥—ã üçìüçíü´ê')
    list_product = list(set([item.product for item in price_list_model]))
    await message.answer(text=f'–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç:',
                         reply_markup=kb.keyboards_list_product(list_product=list_product))


@router_shop.callback_query(F.data.startswith('product'))
async def get_title_product(callback: CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤—ã–≤–æ–¥ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å–ª–∏ –∏—Ö –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ,
     –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'get_title_product: {callback.message.chat.id}')
    await callback.answer()
    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
    product = callback.data.split('_')[1]
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É
    price_list_model = await rq.get_product(product=product)
    # –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ == 1
    if len(price_list_model) == 1:
        # –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        price_list_title = await rq.get_title(title=price_list_model[0].title)
        # —Å–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        await state.update_data(count_item=0)
        # —Ñ–ª–∞–≥ —Ç–æ–≥–æ —á—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∑–∞–ø—è—Ç–∞—è –ø—Ä–∏ —É–∫–∞–∑–∞–Ω–∏–∏ –≤–µ—Å–∞
        await state.update_data(comma=0)
        # –µ—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç "—à—Ç.", —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —ç—Ç–æ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        if '—à—Ç' in price_list_title.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        # –≤—ã–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞, –µ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≥ (—à—Ç.) –∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {price_list_title.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_list_title.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=kb.keyboards_get_count(id_product=price_list_title.id))
    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç (—Ç–∞–∫–æ–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤)
    elif len(price_list_model) == 0:
        # –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
        price_list_title = await rq.get_title(title=product)
        # print(price_list_title)
        await state.update_data(count_item=0)
        await state.update_data(comma=0)
        if '—à—Ç' in price_list_title.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {price_list_title.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_list_title.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=kb.keyboards_get_count(id_product=price_list_title.id))
    # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ —ç—Ç–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä
    else:
        title = []
        for item in price_list_model:
            title.append(item.title)
        await callback.message.edit_text(text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:',
                                         reply_markup=kb.keyboards_list_product(list_product=title))


@router_shop.callback_query(F.data.startswith('digit_'))
async def process_count_product(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–ª–∞–≤–∏—à–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'get_count_product: {callback.message.chat.id}')
    await callback.answer()
    input_user = callback.data.split('_')
    # –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞
    digit = input_user[1]
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ —Ü–∏—Ñ—Ä–∞
    if digit.isdigit():
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dict[callback.message.chat.id] = await state.get_data()
        # –µ—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è –Ω–µ –Ω–∞–∂–∞—Ç–∞
        if user_dict[callback.message.chat.id]['comma'] == 0:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –ø—É—Ç–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏
            count_item = int(str(user_dict[callback.message.chat.id]['count_item']) + str(digit))
            # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
            await state.update_data(count_item=count_item)
            # –ø–æ–ª—É—á–∞–µ–º id –ø—Ä–æ–¥—É–∫—Ç–∞
            id_product = input_user[2]
            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
            info_product = await rq.get_info_product(id_product=int(id_product))
            if '—à—Ç' in info_product.title:
                e = '—à—Ç'
            else:
                e = '–∫–≥'
            try:
                await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                                      f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item} {e}.',
                                                 reply_markup=kb.keyboards_get_count(id_product=info_product.id,
                                                                                     count_item=count_item * 10))
            except :
                await callback.message.edit_text(text=f'–¢o–≤–∞—Ä: {info_product.title}\n'
                                                      f'–°—Ço–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item} {e}.',
                                                 reply_markup=kb.keyboards_get_count(id_product=info_product.id,
                                                                                     count_item=count_item * 10))
        # –µ—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è –Ω–∞–∂–∞—Ç–∞ –∏ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
        else:
            # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ –¥–µ—Å—è—Ç—å —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
            # —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ü–µ–ª—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            count_item = int(user_dict[callback.message.chat.id]['count_item']) * 10 + int(digit)
            # –æ–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –æ–¥–Ω–æ —á–∏—Å–ª–æ
            await state.update_data(count_item=0)
            # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–∂–∞—Ç–∏—è –∑–∞–ø—è—Ç–æ–π
            await state.update_data(comma=0)
            # –ø–æ–ª—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
            id_product = input_user[2]
            # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
            info_product = await rq.get_info_product(id_product=int(id_product))
            if '—à—Ç' in info_product.title:
                e = '—à—Ç'
            else:
                e = '–∫–≥'
            try:
                await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                                      f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                                      f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item/10} {e}.',
                                                 reply_markup=kb.keyboards_get_count(id_product=info_product.id,
                                                                                     count_item=count_item))
            except IndexError:
                pass
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∑–∞–ø—è—Ç–∞—è
    elif digit == '#':
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
        user_dict[callback.message.chat.id] = await state.get_data()
        # –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ –≤–≤–æ–¥–∞ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        await state.update_data(comma=1)
        # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        count_item = user_dict[callback.message.chat.id]['count_item']
        # –ø–æ–ª—É—á–∞–µ–º id —Ç–æ–≤–∞—Ä–∞
        id_product = input_user[2]
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        info_product = await rq.get_info_product(id_product=int(id_product))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ –¥–µ—Å—è—Ç–∏—á–Ω—É—é —á–∞—Å—Ç—å –∏ —É–º–Ω–æ–∂–∏–≤ –Ω–∞ 10 —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        if '—à—Ç' in info_product.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_item},00 {e}.',
                                         reply_markup=kb.keyboards_get_count(id_product=info_product.id,
                                                                             count_item=count_item*10))
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∏—Ç—å
    else:
        await state.update_data(comma=0)
        await state.update_data(count_item=0)
        id_product = input_user[2]
        info_product = await rq.get_info_product(id_product=int(id_product))
        if '—à—Ç' in info_product.title:
            e = '—à—Ç'
        else:
            e = '–∫–≥'
        await callback.message.edit_text(text=f'–¢–æ–≤–∞—Ä: {info_product.title}\n'
                                              f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} —Ä—É–±.\n\n'
                                              f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: 0 {e}.',
                                         reply_markup=kb.keyboards_get_count(id_product=info_product.id,
                                                                             count_item=0))


@router_shop.callback_query(F.data.startswith('count'))
async def get_count_product(callback: CallbackQuery):
    """
    –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    :param callback:
    :return:
    """
    logging.info(f'get_count_product: {callback.message.chat.id}')

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
    count = int(callback.data.split('_')[1])
    if count == 0:
        await callback.answer('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é.', show_alert=True)
        return
    await callback.answer()
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
    info_product = await rq.get_info_product(id_product=int(callback.data.split('_')[2]))
    if '—à—Ç' in info_product.title:
        e = '—à—Ç'
    else:
        e = '–∫–≥'
    if count % 10:
        count_ = count / 10
    else:
        count_ = int(count // 10)
    if (info_product.price * count) % 10:
        amount = info_product.price * count_
    else:
        amount = int(info_product.price * count_)
    await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {info_product.title}\n\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count_} {e}.\n'
                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_product.price} x {count_} = '
                                          f'{amount} —Ä—É–±.',
                                     reply_markup=kb.keyboard_create_item(id_product=int(callback.data.split('_')[2]),
                                                                          count_item=count))


@router_shop.callback_query(F.data.startswith('add_item/'))
async def add_item_order(callback: CallbackQuery, bot: Bot):
    """
    –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'add_item_order: {callback.message.chat.id} - {callback.data}')
    await callback.answer()
    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –û—Ç–º–µ–Ω–∞
    if callback.data.split('/')[1] != 'cancel':
        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
        count_item = int(callback.data.split('/')[2])
        # id —Ç–æ–≤–∞—Ä–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ price
        id_product = int(callback.data.split('/')[1])
        # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
        info_product = await rq.get_info_product(id_product=id_product)

        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_order_id = await rq.get_all_order_id(tg_id=callback.message.chat.id)
        # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Ö –Ω–µ—Ç –∏–ª–∏ –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        create_item = {}
        if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
            # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–∫–∞–∑–∞
            create_order = {}
            # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
            current_date = datetime.now()
            current_date_string = current_date.strftime('%m/%d/%y_%H:%M:%S')
            # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
            id_order = f'{callback.message.chat.id}_{current_date_string}'
            create_order['id_order'] = id_order
            create_order['telegram_id'] = callback.message.chat.id
            await rq.add_order(data=create_order)

            create_item['id_order'] = id_order
            create_item['telegram_id'] = callback.message.chat.id
            create_item['item'] = info_product.title
            create_item['count'] = count_item
            create_item['price'] = info_product.price
            await rq.add_item(data=create_item)
        # –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑
        else:
            create_item['id_order'] = all_order_id[-1].id_order
            create_item['telegram_id'] = callback.message.chat.id
            create_item['item'] = info_product.title
            create_item['count'] = count_item
            create_item['price'] = info_product.price
            await rq.add_item(data=create_item)
        # –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∏ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
        all_order_id = await rq.get_all_order_id(tg_id=callback.message.chat.id)
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        for item in all_item_id:
            if item.id_order == all_order_id[-1].id_order:
                i += 1
                if item.count % 10:
                    count = item.count / 10
                else:
                    count = int(item.count // 10)
                if (info_product.price * item.count) % 10:
                    amount = item.price * count
                else:
                    amount = int(item.price * count)
                text += f'{i}. {item.item} {count} x {item.price} = {amount} —Ä—É–±.\n'
                total += amount
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
        list_price = await rq.get_list_price()
        list_category = list(set([price.category for price in list_price]))
        await callback.message.answer(text='–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–∫–∞–∑',
                                      reply_markup=kb.keyboards_main_category(list_category=list_category,
                                                                              basket=total))
        await callback.message.answer(text=text,
                                      reply_markup=kb.keyboard_confirm_order(id_order=all_order_id[-1].id_order))
        try:
            await bot.delete_message(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id)
        except IndexError:
            pass
    else:
        try:
            await bot.delete_message(chat_id=callback.message.chat.id,
                                     message_id=callback.message.message_id)
        except IndexError:
            pass
        await callback.message.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ!')


@router_shop.callback_query(F.data.startswith('place_an_order/'))
async def place_an_order(callback: CallbackQuery, bot: Bot):
    """
    –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    :param callback:
    :param bot:
    :return:
    """
    logging.info(f'place_an_order: {callback.message.chat.id}')
    await callback.answer()
    count_item = int(callback.data.split('/')[2])
    id_product = int(callback.data.split('/')[1])
    info_product = await rq.get_info_product(id_product=id_product)
    all_order_id = await rq.get_all_order_id(tg_id=callback.message.chat.id)
    create_item = {}
    if not all_order_id or all_order_id[-1].status in ['complete', 'PAYED', 'cancelled']:
        create_order = {}
        # —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –¥–ª—è –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
        current_date = datetime.now()
        current_date_string = current_date.strftime('%m/%d/%y_%H:%M:%S')
        # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        id_order = f'{callback.message.chat.id}_{current_date_string}'
        create_order['id_order'] = id_order
        create_order['telegram_id'] = callback.message.chat.id
        await rq.add_order(data=create_order)

        create_item['id_order'] = id_order
        create_item['telegram_id'] = callback.message.chat.id
        create_item['item'] = info_product.title
        create_item['count'] = count_item
        create_item['price'] = info_product.price
        await rq.add_item(data=create_item)
    else:

        create_item['id_order'] = all_order_id[-1].id_order
        create_item['telegram_id'] = callback.message.chat.id
        create_item['item'] = info_product.title
        create_item['count'] = count_item
        create_item['price'] = info_product.price
        await rq.add_item(data=create_item)
    all_order_id = await rq.get_all_order_id(tg_id=callback.message.chat.id)
    all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
    i = 0
    total = 0
    for item in all_item_id:
        if item.id_order == all_order_id[-1].id_order:
            i += 1
            if item.count % 10:
                count = item.count / 10
            else:
                count = int(item.count // 10)
            if (info_product.price * item.count) % 10:
                amount = item.price * count
            else:
                amount = int(item.price * count)
            text += f'{i}. {item.item} {count} x {item.price} = {amount} —Ä—É–±.\n'
            total += amount
    text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
    await callback.message.answer(text=text,
                                  reply_markup=kb.keyboards_main_menu(basket=total))
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except IndexError:
        pass
    await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑',
                                  reply_markup=kb.keyboard_confirm_order(id_order=all_order_id[-1].id_order))


@router_shop.callback_query(F.data.startswith('change#'))
async def order_confirm(callback: CallbackQuery, state: FSMContext):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    # –ø–æ–ª—É—á–∞–µ–º id –∑–∞–∫–∞–∑–∞
    id_order = callback.data.split('#')[1]
    # –æ–±–Ω–æ–≤–ª—è–µ–º state
    await state.update_data(id_order=id_order)
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
    list_item = []
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Ç–æ–≤–∞—Ä–æ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    for item in all_item_id:
        if item.id_order == id_order:
            list_item.append(item)
    # –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    await callback.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è',
                                     reply_markup=kb.keyboards_list_item_change(list_item=list_item))


@router_shop.callback_query(F.data.startswith('itemchange_'))
async def item_change(callback: CallbackQuery, state: FSMContext):
    """
    –¢–æ–≤–∞—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –≤ –∑–∞–∫–∞–∑–µ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ (–ò–∑–º–µ–Ω–∏—Ç—å-–£–¥–∞–ª–∏—Ç—å-–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å)
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'item_change: {callback.message.chat.id}')
    await callback.answer()
    user_dict[callback.message.chat.id] = await state.get_data()
    id_order = user_dict[callback.message.chat.id]['id_order']
    id_item = int(callback.data.split('_')[1])
    await callback.message.edit_text(text='–í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –∑–∞–∫–∞–∑–∞?',
                                     reply_markup=kb.keyboard_change_item(id_item=id_item, id_order=id_order))


@router_shop.callback_query(F.data.startswith('itemdel#'))
async def process_item_change(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
    :param callback:
    :param state:
    :param bot:
    :return:
    """
    logging.info(f'process_item_change: {callback.message.chat.id}')
    await callback.answer()
    # id —Ç–æ–≤–∞—Ä–∞
    id_item = int(callback.data.split('#')[1])
    # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø–æ –µ–≥–æ id –≤ —Ç–∞–±–ª–∏—Ü–µ Item
    await rq.delete_item(id_item=id_item)
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_dict[callback.message.chat.id] = await state.get_data()
    # –ø–æ–ª—É—á–∞–µ–º id –∑–∞–∫–∞–∑–∞
    id_order = user_dict[callback.message.chat.id]['id_order']
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
    text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
    i = 0
    total = 0
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    for item in all_item_id:
        # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ
        if item.id_order == id_order:
            i += 1
            if item.count % 10:
                count = item.count / 10
            else:
                count = int(item.count // 10)
            if (item.price * item.count) % 10:
                amount = item.price * count
            else:
                amount = int(item.price * count)
            text += f'{i}. {item.item} {count} x {item.price} = {amount} —Ä—É–±.\n'
            total += amount
    text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
    list_price = await rq.get_list_price()
    list_category = list(set([price.category for price in list_price]))
    await callback.message.answer(text=text,
                                  reply_markup=kb.keyboards_main_category(list_category=list_category, basket=total))
    try:
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=callback.message.message_id)
    except IndexError:
        pass
    await callback.message.answer(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑',
                                  reply_markup=kb.keyboard_confirm_order(id_order=id_order))


@router_shop.callback_query(F.data.startswith('itemchange#'))
async def process_item_change(callback: CallbackQuery, state: FSMContext):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏ –µ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'process_item_change: {callback.message.chat.id}')
    await callback.answer()
    id_item = int(callback.data.split('#')[1])
    await state.update_data(comma=0)

    info_item = await rq.get_info_item(id_item=id_item)
    await state.update_data(count_item=0)
    info_price = await rq.get_title(title=info_item.item)
    if '—à—Ç' in info_price.title:
        e = '—à—Ç'
    else:
        e = '–∫–≥'
    if info_item.count % 10:
        count = info_item.count / 10
    else:
        count = int(info_item.count // 10)
    if (info_item.price * info_item.count) % 10:
        amount = info_item.price * count
    else:
        amount = int(info_item.price * count)
    await callback.message.edit_text(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {info_item.item}\n\n'
                                          f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {count} {e}.\n'
                                          f'–°—Ç–æ–∏–º–æ—Å—Ç—å: {info_item.price} x {count} = '
                                          f'{amount} —Ä—É–±.',
                                     reply_markup=kb.keyboards_get_count(id_product=info_price.id,
                                                                         count_item=info_item.count))


@router_shop.callback_query(F.data.startswith('confirm#'))
async def order_confirm(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    :param callback:
    :param state:
    :return:
    """
    logging.info(f'order_confirm: {callback.message.chat.id}')
    await callback.answer()
    id_order = callback.data.split('#')[1]
    all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
    total = 0
    for item in all_item_id:
        if item.id_order == id_order:
            total += (item.count / 10) * item.price
    await state.update_data(id_order=id_order)
    if total < 5000:
        await callback.message.edit_text(text='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ 5000 —Ä—É–±.',
                                         reply_markup=None)
        await asyncio.sleep(1)
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dict[callback.message.chat.id] = await state.get_data()
        # –ø–æ–ª—É—á–∞–µ–º id –∑–∞–∫–∞–∑–∞
        id_order = user_dict[callback.message.chat.id]['id_order']
        # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_item_id = await rq.get_all_item_id(tg_id=callback.message.chat.id)
        text = '–í–∞—à –∑–∞–∫–∞–∑:\n\n'
        i = 0
        total = 0
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∑–∞–∫–∞–∑–µ –∏ –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        for item in all_item_id:
            # –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –∑–∞–∫–∞–∑–µ
            if item.id_order == id_order:
                i += 1
                if item.count % 10:
                    count = item.count / 10
                else:
                    count = int(item.count // 10)
                if (item.price * item.count) % 10:
                    amount = item.price * count
                else:
                    amount = int(item.price * count)
                text += f'{i}. {item.item} {count} x {item.price} = {amount} —Ä—É–±.\n'
                total += amount
        text += f'\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±.'
        list_price = await rq.get_list_price()
        list_category = list(set([price.category for price in list_price]))
        await callback.message.answer(text=text,
                                      reply_markup=kb.keyboards_main_category(list_category=list_category,
                                                                              basket=total))
    else:
        await callback.message.edit_text(text='–ö–∞–∫ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑?',
                                         reply_markup=kb.keyboard_delivery())
